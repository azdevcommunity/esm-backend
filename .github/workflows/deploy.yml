name: Build & Deploy (Spring)

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: ghcr.io/azdevcommunity/esm-backend
  APP_PORT: 8083

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: VPS
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21 (for Gradle if needed by Docker build)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Login to GHCR
        uses: docker/login-action@
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e

            IMAGE="${{ env.IMAGE_NAME }}:latest"
            APP_PORT="${{ env.APP_PORT }}"

            echo "Logging into GHCR..."
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            echo "Pulling latest image: $IMAGE"
            docker pull "$IMAGE"

            echo "Stopping container that uses port ${APP_PORT} if any..."
            # Portu publish eden container'ı bul ve durdur
            CONTAINER_USING_PORT=$(docker ps --format '{{.ID}} {{.Ports}}' | awk '/:'"$APP_PORT"'->/ {print $1}' | head -n1)
            if [ -n "$CONTAINER_USING_PORT" ]; then
              docker stop "$CONTAINER_USING_PORT" || true
            fi

            NEW_NAME="medrese-backend-$(date +%s)"
            echo "Starting new container: $NEW_NAME"

            docker run -d \
              --name "$NEW_NAME" \
              -e ESM_DB_URL="${{ secrets.ESM_DB_URL }}" \
              -e ESM_DB_USERNAME="${{ secrets.ESM_DB_USERNAME }}" \
              -e ESM_DB_PASSWORD="${{ secrets.ESM_DB_PASSWORD }}" \
              -e SERVER_PORT="8080" \
              -p ${APP_PORT}:8080 \
              -v /var/www/esm/uploads:/app/uploads \
              --network esm_network \
              --network-alias medrese-backend-app \
              "$IMAGE"

            echo "Health check (30s içinde hazır mı?)"
            for i in $(seq 1 30); do
              if curl -fsS "http://127.0.0.1:${APP_PORT}/actuator/health" >/dev/null 2>&1; then
                echo "UP"
                break
              fi
              sleep 1
            done

            # Eğer actuator yoksa basit kontrol:
            # curl -fsS "http://127.0.0.1:${APP_PORT}/" >/dev/null 2>&1 || true

            echo "Prune old exited containers named pattern 'medrese-backend-*'"
            docker ps -a --filter 'status=exited' --filter 'name=medrese-backend-' --format '{{.ID}}' | xargs -r docker rm

            echo "Cleanup dangling images"
            docker image prune -f
